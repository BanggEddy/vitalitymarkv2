security:
  enable_authenticator_manager: true
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: "auto"
  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
  providers:
    # used to reload user from session & other features (e.g. switch_user)
    app_user_provider:
      entity:
        class: App\Entity\User
        property: email
  firewalls:
    login:
      pattern: ^/api/login
      stateless: true
      json_login:
        check_path: /api/login_check
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure

    api:
      pattern: ^/api
      stateless: true
      jwt: ~
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    main:
      pattern: ^/
      user_checker: App\Security\UserChecker
      lazy: true
      provider: app_user_provider
      custom_authenticator: App\Security\AuthAuthenticator
      logout:
        path: app_logout
        # where to redirect after logout
        # target: app_any_route

      remember_me:
        secret: "%kernel.secret%"
        lifetime: 604800
        path: /
        # by default, the feature is enabled by checking a checkbox in the
        # login form, uncomment the following line to always enable it.
        #always_remember_me: true

      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#the-firewall

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    #USER
    - { path: ^/uservue, roles: ROLE_USER }
    - { path: ^/user/promo, roles: ROLE_USER }
    - { path: ^/add-dans-panier/, roles: ROLE_USER }
    - { path: ^/user/panier, roles: ROLE_USER }
    - { path: ^/search/user, roles: ROLE_USER }
    - { path: ^/user/loyalty-card/, roles: ROLE_USER }
    - { path: ^/user/uservue/card/, roles: ROLE_USER }
    - { path: ^/user/uservue/creer/carte/loyalty, roles: ROLE_USER }
    - { path: ^/user/profile, roles: ROLE_USER }
    - { path: ^/edit/user/profile, roles: ROLE_USER }
    - { path: ^/user/uservue/categorie/, roles: ROLE_USER }
    - { path: ^/contact/user, roles: ROLE_USER }
    - { path: ^/contact/user/submit, roles: ROLE_USER }
    - { path: ^/details/produit/user/, roles: ROLE_USER }
    - { path: ^/update-quantity, roles: ROLE_USER }

    #ADMIN
    - { path: ^/adminproducts, roles: ROLE_ADMIN }
    - { path: ^/adminajouterproducts, roles: ROLE_ADMIN }
    - { path: ^/admin/deleteproduct, roles: ROLE_ADMIN }
    - { path: ^/adminupdateproducts, roles: ROLE_ADMIN }
    - { path: ^/adminformedit, roles: ROLE_ADMIN }
    - { path: ^/admin/add_quantity, roles: ROLE_ADMIN }
    - { path: ^/admin/remove_quantity, roles: ROLE_ADMIN }
    - { path: ^/compte/admin, roles: ROLE_ADMIN }
    - { path: ^/edit/admin/profile, roles: ROLE_ADMIN }
    - { path: ^/admin/adminproducts/categorie/, roles: ROLE_ADMIN }

    # - { path: ^/admin, roles: ROLE_ADMIN }

when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
